- name: Add "{{ project }}" Aliases
  blockinfile:
    state: present
    insertafter: EOF
    dest: "{{ ansible_env.HOME }}/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Add \"{{ project }}\" Aliases"
    content: |
      alias {{ project }}="cd {{ COLOUR_SCIENCE__ROOT_DIRECTORY }}/{{ project }} && uva"
      alias {{ project }}-notebook="{{ project }} && cd {{ COLOUR_SCIENCE__ROOT_DIRECTORY }} && jupyter notebook --ip=0.0.0.0 --port={{ COLOUR_SCIENCE__JUPYTER_NOTEBOOK_PORT }} --allow-root"

- import_tasks: "clone_repository.yml"
  vars:
    repository: "{{ project }}"
    branch: "{{ version | default('main') }}"
    repository_base_url: "{{ repository_base }}"

- name: Update "{{ project }}" Submodules
  shell: |
    git submodule update --init --recursive
  args:
    chdir: "{{ COLOUR_SCIENCE__ROOT_DIRECTORY }}/{{ project }}"

- name: Install "{{ project }}" Project Package Dependencies
  shell: |
    uv venv --python {{ COLOUR_SCIENCE__PYTHON_VERSION }}
    uv sync --all-extras
    uv run pip install ".[optional]"
    uv run pip list | grep -c imageio && uv run python -c "import imageio;imageio.plugins.freeimage.download()" || exit 0
  args:
    chdir: "{{ COLOUR_SCIENCE__ROOT_DIRECTORY }}/{{ project }}"

- name: Install "pre-commit" Hooks for "{{ project }}"
  shell: |
    uv run pre-commit install --install-hooks
  args:
    chdir: "{{ COLOUR_SCIENCE__ROOT_DIRECTORY }}/{{ project }}"

- name: Check if "OpenImageIO" Library is Installed for "{{ project }}"
  shell: |
    [ -f ".venv/lib/python{{ COLOUR_SCIENCE__PYTHON_VERSION }}/site-packages/OpenImageIO.so" ] && echo True || echo False
  args:
    chdir: "{{ COLOUR_SCIENCE__ROOT_DIRECTORY }}/{{ project }}"
  register: project_openimageio_library_exists

- name: Install "OpenImageIO" Library for "{{ project }}"
  shell: |
    ln -s /usr/lib/python3/dist-packages/OpenImageIO*so .venv/lib/python{{ COLOUR_SCIENCE__PYTHON_VERSION }}/site-packages/OpenImageIO.so || exit 0
  args:
    chdir: "{{ COLOUR_SCIENCE__ROOT_DIRECTORY }}/{{ project }}"
  when: project_openimageio_library_exists.stdout == "False"

- name: Check if "{{ project }}" Extras Task File Exists
  stat:
    path: "{{ playbook_dir }}/tasks/extras/extras_{{ project }}.yml"
  register: project_extras_tasks_file

- name: Include "{{ project }}" Extras Task
  include_tasks: "{{ project_extras_tasks_file.stat.path }}"
  when: project_extras_tasks_file.stat.exists
